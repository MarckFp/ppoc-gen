name: Deploy

on:
  push:
    tags:
      - "*.*.*"

jobs:
  deploy-web:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-web
      cancel-in-progress: true
    permissions:
      pages: write
      id-token: write
      contents: write
      discussions: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - run: |
          git config --global user.email ${{ secrets.GH_EMAIL }}
          git config --global user.name GitHub_Runner
      - run: echo "`jq '.start_url="/${{ github.event.repository.name }}/"' static/manifest.webmanifest`" > static/manifest.webmanifest
      - run: echo "`jq '.scope="/${{ github.event.repository.name }}/"' static/manifest.webmanifest`" > static/manifest.webmanifest
      - run: bun install
      - run: npm --no-git-tag-version version ${{  github.ref_name }}
      - run: bun run build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
          NODE_ENV: 'production'
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'
      - uses: actions/deploy-pages@v4
        id: deployment
  deploy-desktop:
    permissions:
      contents: write
      discussions: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-13'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-latest'
            args: ''
          - platform: 'windows-latest'
            args: ''
    runs-on: ${{ matrix.settings.platform }}
    steps:
      - uses: actions/checkout@v4
      - if: matrix.settings.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - run: |
          git config --global user.email ${{ secrets.GH_EMAIL }}
          git config --global user.name GitHub_Runner
      - run: bun install
      - run: npm --no-git-tag-version version ${{  github.ref_name }}
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tauriScript: 'bun run tauri'
          tagName: ${{  github.ref_name }}
          releaseName: ${{  github.ref_name }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
  generate-updater:
    runs-on: 'ubuntu-latest'
    needs: deploy-desktop
    steps:
      - uses: actions/checkout@v4
      - id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:00Z')"
      - id: linux-x86_64
        run: echo "signature=$(cat ppoc-gen_${{ github.ref_name }}.app.AppImage.tar.gz.sig)" >> $GITHUB_OUTPUT
      - id: windows-x86_64
        run: echo "signature=$(cat ppoc-gen_${{ github.ref_name }}.app.msi.sig)" >> $GITHUB_OUTPUT
      - id: darwin-x86_64
        run: echo "signature=$(cat ppoc-gen_${{ github.ref_name }}.app.tar.gz.sig)" >> $GITHUB_OUTPUT
      - id: darwin-aarch64
        run: echo "signature=$(cat ppoc-gen_${{ github.ref_name }}.app.tar.gz.sig)" >> $GITHUB_OUTPUT
      - run: |
          git config --global credential.helper 'f() {sleep 1; echo "username=git token=${{ secrets.GH_GIST }}";}; f'
          git clone https://gist.github.com/MarckFp/8925cc5babe67bed81c0c8366b2bb906 && cd 8925cc5babe67bed81c0c8366b2bb906
          echo "`jq '.version="${{ github.ref_name }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json
          echo "`jq '.pub_date="${{ steps.date.outputs.date }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json

          echo "`jq '.platforms."linux-x86_64".url="https://github.com/MarckFp/ppoc-gen/releases/download/${{ github.ref_name }}/ppoc-gen_${{ github.ref_name }}_amd64.AppImage"' ppoc-gen-updater.json`" > ppoc-gen-updater.json
          echo "`jq '.platforms."linux-x86_64".signature="${{ steps.linux-x86_64.outputs.signature }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json

          echo "`jq '.platforms."windows-x86_64".url="https://github.com/MarckFp/ppoc-gen/releases/download/${{ github.ref_name }}/PPOC.Gen_${{ github.ref_name }}_x64_en-US.msi"' ppoc-gen-updater.json`" > ppoc-gen-updater.json
          echo "`jq '.platforms."windows-x86_64".signature="${{ steps.windows-x86_64.outputs.signature }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json

          echo "`jq '.platforms."darwin-aarch64".url="https://github.com/MarckFp/ppoc-gen/releases/download/${{ github.ref_name }}/PPOC.Gen_aarch64.app.tar.gz"' ppoc-gen-updater.json`" > ppoc-gen-updater.json
          echo "`jq '.platforms."darwin-aarch64".signature="${{ steps.darwin-x86_64.outputs.signature }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json

          echo "`jq '.platforms."darwin-x86_64".url="https://github.com/MarckFp/ppoc-gen/releases/download/${{ github.ref_name }}/PPOC.Gen_x64.app.tar.gz"' ppoc-gen-updater.json`" > ppoc-gen-updater.json
          echo "`jq '.platforms."darwin-x86_64".signature="${{ steps.darwin-x86_64.outputs.signature }}"' ppoc-gen-updater.json`" > ppoc-gen-updater.json

          git commit -m "Updated to version ${{ github.ref_name }}"
          git push
